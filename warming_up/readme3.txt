#include <cstdlib> 와 <ctime> 을 통해 랜덤함수를 사용하도록 하였습니다.
#include <Windows.h> 을 추가해서 GetAsyncKeyState 함수를 사용하였습니다.

저는 r 명령어를 입력할 시 랜덤 값을 다시 설정하는 명령도 추가해보았습니다.

우선 rectangle 구조체를 정의해서 (x1,y1) (x2, y2) 변수를 받도록 하였습니다.
class Collision 를 정의하고  s1, s2 두개의 사각형 구조체를 멤버로 정했습니다.
그리고 유저로부터 경계값(최대값)을 받도록 구현하였습니다.

check_boundary 함수를 이용해 언제라도 정수값이 
0 ~ 500에 해당하는지 확인할 수 있게 하였습니다.

insert_rand_num(rectangle &s) 함수를 만들어서 클래스를 선언할 때 생성자에서
실행하도록 구현하였습니다.
s1 와 s2에게 각각 랜덤값을 주도록 했는데 만약 x2 혹은 y2 가 x1, y1보다 작은 경우
서로의 수를 교환하고 실제 구조체 값에 반영하도록 했습니다. 혹시 x1==x2 혹은 y1==y2
이런 경우는 사각형이라 부를 수 없으므로, 값이 500일 때 x1을 1 감소, 
나머지 경우 x2를 1 증가 하도록 조건을 걸어보았습니다.

main 함수에서 가장 먼저 500값을 경계로 클래스 col을 선언하고
무한루프를 돌아가며 작업을 하도록 하였습니다.

먼저 랜덤 값을 받은 두개의 사각형의 좌표를 출력하고 바로 충돌검사를 하도록 했습니다.

check_collision 함수에서 충돌을 확인하는 방법은 한 사각형의 좌표가 다른 사각형의 좌표
사이에 속하는지 확인하는 것입니다.
그래서 A 사각형의 x2가 B의 x1보다 크면서 A의 x1은 B의 x2보다 작아야하고
동시에 A의 y2가 B의 y1보다 크면서 A의 y1은 B의 y2보다 작으면 충돌이 일어납니다.
저는 선분이 완전히 겹쳐지는 경우도 충돌로 봤기에 같은 경우도 조건에 추가했습니다.
충돌이 일어나면 True를 리턴하고 아니면 False를 리턴하도록 구현했습니다.
그리고 True를 리턴했을 시 충돌이 일어났다는 메세지를 출력하도록 하였습니다.

이제 유저로부터 입력을 받는 함수 getUserInput 를 실행하여 char 값을 받도록 했습니다.
windows.h 헤더에서 제공하는 GetAsyncKeyState 함수를 사용해보았습니다.
이 함수를 사용할 시에는 굳이 키를 입력하고 엔터를 누르는 번거로움이 없어서 사용한 것입니다.
while 문을 계속 돌면서 키를 입력받기 전까지 대기하는 코드입니다.

0x57 : w
0x41 : a
0x53 : s
0x44 : d
0x52 : r

각각 버튼 값을 나타냅니다. 저는 r 명령어도 추가해서 r의 버튼 값도 추가했습니다. 
0x8000은 이전에 누른 적이 없는 상태에서 눌린 상태를 의미하는 비트 값입니다.

Sleep() 함수를 이용해서 코드의 진행을 잠시 멈추었습니다.
왜냐하면 while 무한루프의 진행속도는 너무 빨라서 인간이 버튼을 누르는 시점에 이미
루프를 아주 많이 돌고 있어서 키 입력을 여러번 받게 되는 현상이 발생하였기 때문입니다.

내가 입력한 command 값을 출력하고 command 값이 r 일 경우 다시 랜덤값을 부여하는
reset_rectangle 함수를 불러오고, 아니면 사각형을 움직이는 함수를 불러오게 하였습니다. 

이 함수에서는 입력받은 command 값에 따라서 50으로 설정한 증감 숫자를 뺄지 더할지를
결정하도록 구현하였습니다. x축에 해당하는 경우 x_move의 +, -를 결정하고 y축에 해당하면
y_move의 +, -를 결정하게 하였습니다.
사각형을 이동할 때 0 ~ 500의 경계를 벗어나는지 check_boundary로 확인하고
벗어나지 않는다면 비로소 사각형의 좌표값을 재설정하도록 했습니다.
벗어나는 경우 에러메세지를 출력하도록 구현하였습니다.