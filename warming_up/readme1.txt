헤더파일에 <csdlib>와 <ctime>을 추가하여 랜덤함수를 사용할 수 있게 하였습니다.
그리고 <cmath>를 추가해서 pow 함수를 사용해 제곱 값을 얻을 수 있게 하였습니다.

저는 배열의 크기를 10으로 고정하였습니다. 공간의 여유를 주기 위함도 있고 크기 변환을
할 때도 용이하기 때문에 그렇게 하였습니다.

저는 MyProgram 이라는 클래스를 따로 만들어서 멤버함수들을 구현하였습니다.
클래스 생성자에 length 변수를 받도록 하여 정방행렬의 길이 값을 얻어내도록 했습니다.
그리고 사칙연산 후 계산한 행렬을 result 행렬에 담을 수 있게 하였고 -1로 초기화했습니다.

multiply( int arr1, int arr2 ) 함수를 만들어 result 행렬에 곱셈한 값을 넣었습니다.
for 문에서 i, j 로 값이 들어갈 result 행렬의 위치를 순서대로 옮겼고
변수 k 를 이용해서 각각 해당 행과 열에 속하는 수를 순서대로 곱할 수 있게 하였습니다.
그런데 곱셈을 반복해서 실행할 때마다 결과 값이 계속 증가해서 계산 전에 refresh() 함수를 이용해
result 값을 0으로 초기화하는 작업도 추가하였습니다.

add 함수와 subtract 함수를 이용해 행렬 간 덧셈과 뺄셈을 구현하였습니다.
이번 계산에서는 result 와 각각의 행렬 간의 위치가 항상 같기 때문에 2개의 for 문만 사용하였습니다.

determinant ( int arr, int k ) 함수를 이용해서 행렬의 값을 구하도록 하였습니다.
integer k 로 정방행렬의 크기를 받도록 해서 3x3 보다 큰 행렬도 사용가능하도록 하였습니다.
k 가 2일 경우 복잡할 필요없이 행렬 값은 ad - bc 임으로 간단하게 작성하였고
2 보다 클 경우에는 그 크기만큼 for 문으로 반복해서 det 에 값을 더하도록 하였습니다.
pow() 함수를 이용하여 n의 크기에 따라 + 혹은 - 를 결정하도록 하였고,
행렬 값을 구하는 식에 따라 첫번째 행의 원소들을 차례로 선택하고 그 원소의 행과 열에 해당하는
원소들을 제외한 나머지를 sub_array 에 추가하도록 구현하였습니다. 
sub_i 와 sub_j 를 이용해 sub_array 에 들어갈 값의 위치가 for 문에 구애받지 않도록 하였습니다.
그리고 나머지 원소들은 모두 2번째 행부터 시작되므로 i 는 1부터 증가하도록 하였고 
열 값인 j 는 선택받은 원소의 열 n 와 겹치지 않게 조건을 달았습니다.

sub_array를 구하고 난 뒤에는 k 의 값을 하나 줄이고 다시 determinant 함수를 호출하는
순환 방식으로 진행하도록 하였습니다.

transpose 함수를 이용해 입력받은 행렬의 값을 새로운 trans 행렬로 옮겨주었습니다.
행과 열의 값을 뒤바꿔서 trans 행렬에 입력하였습니다.

resize 함수도 마찬가지로 resized 행렬에 값을 복사하도록 구현하였습니다. 4번째 행과 열에는
0을 넣고 4번째 행의 4번째 원소에 1을 넣도록 조건을 달았습니다.

사칙연산 후 결과 행렬을 출력하도록 printResult() 함수를, trans 행렬과 resized 행렬을 출력하도록
printArray() 함수를 구현하였습니다.

randomize() 함수를 만들고 main 함수에서 처음 제시되는 행렬들을 무작위로 지정하였습니다.
이 함수는 command 's' 를 입력했을 때도 사용됩니다.

main 함수에서는 콘솔창에 출력되는 간단한 레이아웃과 사용자가 입력하는 command
값에 따라 서로다른 기능을 수행하도록 구현하였습니다.

