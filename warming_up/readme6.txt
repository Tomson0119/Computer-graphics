Rectangle 클래스를 만들고 각각의 명령에 따라 수행하는 각기 다른 함수를 만들어보았습니다.
board 이차원 배열을 포인터 형식으로 동적할당하도록 구현하였습니다.
main 함수에서 설정한 board의 길이 값을 length에 대입하도록 하였습니다.
처음 유저로부터 입력받은 사각형의 좌표 값을 rect_x1 ~ y2 에 대입하도록
make_rect 함수에서 명시하였습니다. 그리고 값을 받고 나면 for문을 돌려서
해당하는 값에 해당하는 좌표의 board 값은 1, 해당하지 않다면 0을 설정하도록 구현하였습니다.

main 함수에서 처음에 input_xy 함수에 입력값을 전달하도록 했는데 이 함수는 
유저로부터 입력을 받는 부분을 따로 함수로 만든 것입니다. r 명령어가 입력되면
다시 입력함수를 불러올 수 있도록 이렇게 따로 구현한 것입니다.
input_xy 함수에서는 유저에게 입력받은 변수가 1~30에 해당하는 정수인지 확인하는
절차를 추가하였습니다. 문자를 입력한다던가 0이나 30을 넘는 수를 입력하면 입력버퍼를
초기화하고 다시 입력받을 수 있도록 while문을 만들었습니다.
그리고 제대로 입력하면 실제 배열에 넣을 때 햇갈리지 않도록 각 입력값을 1감소시켰습니다.
만약 x2나 y2가 x1, y1보다 값이 작으면 서로 바꾸도록 구현하였습니다.

print_board 함수에서 board의 초기값인 0이면 "."을 출력하고 아니라면 "O"를 출력하도록
하였습니다.

입력받은 command 값에 따라 작업을 수행하도록 하였는데 우선 move_x의 함수를 통해
사각형을 x축으로 이동하는 기능을 구현하였습니다. 이 때 경계값을 넘으면 수행하지 않도록
조건문을 넣었습니다.
move_x에서 x2, x1이 증가했다면, rect_y1 와 rect_y2 사이에 존재하는
모든 rect_x1 열의 board값을 0으로 만들고 이미 증가된 x2의 해당하는 좌표는 1로 만들어서
실제 오른쪽으로 움직인 것처럼 보이게 구현하였습니다.
반대로 x1,x2가 줄어들었다면 줄어든 x1의 해당하는 좌표를 1로 만들고 rect_x2에 해당하면
0을 설정하도록 하였습니다. 마지막으로 rect_x1 와 rect_x2를 재설정하여  다음 작업에
대비하도록 하였습니다.
move_y 함수도 move_x와 마찬가지로 행과 열을 바꿔서 동일하게 구현하였습니다.

resize_x 함수와 resize_y 함수는 각각 x축, y축으로 확대밑 축소하는 함수입니다.
여기서 x2와 y2만 변화하기 때문에 각 함수에 x,y 하나만 인자로 넣었습니다.
만약 x값이 증가하면 rect_x2 보다 크기 때문에 x행에 해당하는 좌표값을 1로 만들고
x가 감소했다면 rect_x2의 값을 0으로 설정합니다. rect_x2는 마지막에 x로 설정합니다.
resize_y 도 마찬가지로 진행됩니다. 행과 열만 바꿔서 구현하였습니다.

resize_rect 함수에서는 이제 y값과 x값을 모두 증가/감소 시키는 함수입니다.
x와 y값을 증가/감소시키는 함수가 이미 존재하기 때문에 간단하게 resize_x와 resize_y를
불러왔습니다.

명령어 r을 입력한 경우 다시 input_xy를 불러와서 새로운 좌표를 입력받고
그 좌표를 다시 make_rect에서 새로 board에 적용하도록 구현하였습니다.
